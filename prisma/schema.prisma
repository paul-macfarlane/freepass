generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Example table, can be removed after a couple new routes for real features have been added
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?

    @@unique([provider, providerAccountId])
    @@index([userId])
}

// Necessary for Next auth
model Session {
    id           String @id @default(cuid())
    sessionToken String @unique

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    expires DateTime

    @@index([userId])
}

// Necessary for Next auth
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]
    secrets  Secret[]
    folders  Folder[]
}

model Folder {
    id   String @id @default(cuid())
    name String
    // @@index([name]) IF searching by name at becomes innefficient, uncomment this to add an index

    image     String?
    parentId  String?
    parent    Folder?  @relation("ParentChild", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    children  Folder[] @relation("ParentChild")
    secrets   Secret[]
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    favorited Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // @@index([updatedAt]) IF sorting by updated at becomes innefficient, uncomment this to add an index

    @@index([parentId])
    @@index([userId])
}

enum SecretType {
    LOGIN
    PASSWORD
    SSN
    CREDIT_CARD
    OTHER
}

model Secret {
    id        String     @id @default(cuid())
    name      String
    // @@index([name]) IF searching by name at becomes innefficient, uncomment this to add an index
    image     String?
    type      SecretType
    data      Json // data will vary depending on "type"
    folderId  String
    folder    Folder     @relation(fields: [folderId], references: [id])
    userId    String
    user      User       @relation(fields: [userId], references: [id])
    favorited Boolean    @default(false)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    // @@index([updatedAt]) IF sorting by updated at becomes innefficient, uncomment this to add an index

    @@index([folderId])
    @@index([userId])
}
